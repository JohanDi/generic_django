"""
Django settings for USAHE_Partfinder project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

from django.core.management.utils import get_random_secret_key
import dj_database_url
from corsheaders.defaults import default_headers


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"
# DEVELOPMENT_MODE is a helper variable that you will use to determine
# when to connect to your Postgres database and
# when to connect to a local SQLite database for testing.
DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", default="False") == "True"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", default="127.0.0.1,localhost").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'generic_django.utils_core.apps.UtilsCoreConfig',
    'generic_django.user_core.apps.UserCoreConfig',
    'generic_django.inventory_app.apps.InventoryAppConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'generic_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'generic_django.utils_core.context_processors.global_context', # Adds contents of GLOBAL_CONTEXT setting to all templates
            ],
        },
    },
]

WSGI_APPLICATION = 'generic_django.wsgi.application'

"""
********
* CORS *
********
# Cross-Origin Resource Sharing (CORS) settings
# https://pypi.org/project/django-cors-headers/
# https://www.sohamkamani.com/blog/2016/12/21/web-security-cors/
"""

CORS_ORIGIN_WHITELIST = os.getenv('CORS_ORIGIN_WHITELIST',  default="http://localhost:9000").split(",")
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = default_headers + ('X-XSRF-TOKEN', 'sentry-trace')


"""
************
* DATABASE *
************
https://docs.djangoproject.com/en/5.1/ref/settings/#databases
"""
if DEVELOPMENT_MODE is True:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    # todo switch to postgres
    # if os.getenv("DATABASE_URL", None) is None:
    #     raise Exception("DATABASE_URL environment variable not defined")
    # DATABASES = {
    #     "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
    # }
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

"""
***********************
* USER AUTHENTICATION *
***********************
"""

AUTH_USER_MODEL = 'user_core.User'
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

"""
******************
* REST FRAMEWORK *
******************
"""


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        (
            'rest_framework.permissions.IsAuthenticated',
         )
    ),
    'DEFAULT_PAGINATION_CLASS': 'generic_django.pagination.CustomPageNumberPagination',
    'DEFAULT_METADATA_CLASS': 'generic_django.metadata.CustomMetadata',
    # <-- Custom metadata class which allows to add extra field metadata on the serializer class
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter', # Allows providing 'ordering' query parameters
        'rest_framework.filters.SearchFilter', # Allows providing 'search' query parameters
    ]
}



"""
******************************
* SESSION ENGINE AND COOKIES *
******************************

By pointing the SESSION_ENGINE to using signed_cookies, sessions are not stored in the django_session database table
 as would be the case when use the default db backend. For more info, read:
 https://docs.djangoproject.com/en/2.1/topics/http/sessions/#configuring-sessions
"""

SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_DOMAIN = os.getenv('COOKIE_DOMAIN', default=None)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'lax'
SESSION_COOKIE_SECURE = os.getenv('SECURE', default="False") == "True"


"""
*****************
* CSRF SETTINGS *
*****************

CSRF_COOKIE_DOMAIN
The domain to be used when setting the CSRF cookie. This can be useful for easily allowing cross-subdomain requests to 
be excluded from the normal cross site request forgery protection. It should be set to a string such as "example.com" 
to allow a POST request from a form on one subdomain to be accepted by a view served from another subdomain.

Please note that the presence of this setting does not imply that Django’s CSRF protection is safe from cross-subdomain 
attacks by default - please see the CSRF limitations section.

CSRF_TRUSTED_ORIGINS
A list of hosts which are trusted origins for unsafe requests (e.g. POST). For a secure unsafe request, Django’s CSRF 
protection requires that the request have a Referer header that matches the origin present in the Host header. This 
prevents, for example, a POST request from subdomain.example.com from succeeding against api.example.com. If you need 
cross-origin unsafe requests over HTTPS, continuing the example, add "subdomain.example.com" to this list. The setting 
also supports subdomains, so you could add ".example.com", for example, to allow access from all subdomains of 
example.com.

CSRF_COOKIE_HTTPONLY
This setting is set to false so that vue/axios can access the cookie through javascript. 
However I should look into the possibility to still set this setting to True. Pointers
to tackle this:
https://docs.djangoproject.com/en/2.1/ref/csrf/#acquiring-the-token-if-csrf-use-sessions-or-csrf-cookie-httponly-is-true

CSRF_COOKIE_NAME

"""
CSRF_COOKIE_NAME = 'XSRF-TOKEN'
# <-- XSRF-TOKEN is the default name used by axios to look up the cookie
CSRF_HEADER_NAME = 'CSRF_COOKIE'
# <-- the django normalized header name after receiving the header x-xsrf-token (default axios header)
CSRF_COOKIE_DOMAIN = os.getenv('COOKIE_DOMAIN', default=None)
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'lax'
CSRF_COOKIE_SECURE = os.getenv('SECURE', default="False") == "True"
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', default='http://localhost:9000').split(',')


"""
************************
* INTERNATIONALIZATION *
************************
# https://docs.djangoproject.com/en/5.1/topics/i18n/
"""

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


"""
****************
* STATIC FILES *
****************
Static files (CSS, JavaScript, Images)
https://docs.djangoproject.com/en/5.1/howto/static-files/
"""

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/root')

STATICFILES_DIRS = [
    BASE_DIR / "static/source",
]


"""
*************************
* DJANGO RENDERED PAGES *
*************************
Settings for Django views that render HTML pages.

- HOME_REDIRECT_URL: The URL to redirect to when the root URL is accessed.
- LOGIN_REDIRECT_URL: The URL to redirect to after a user logs in.
- LOGIN_URL: The URL to redirect to if a user is not logged in and tries to access a protected page.
    A Django page can be protected using the LoginRequiredMixin on class based views. Alternatively, the login_required
    decorator can be used on function based views.
- GLOBAL_CONTEXT: A dictionary of key-value pairs that will be available in all templates.
    This is achieved by adding the context processor utils.context_processors.global_context to the TEMPLATES setting.

"""

# Change this to the URL you want users to be redirected to after logging in.
HOME_REDIRECT_URL = None #"user_core:user-list"
LOGIN_REDIRECT_URL = "home"
LOGIN_URL="user_core:login"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Add key-value pairs to this dictionary to make them automatically available in all templates
# through the context processor utils.context_processors.global_context
GLOBAL_CONTEXT = {
    "application_name": "My Example App"
}
